<style>
.connector {
    background-color: #161212ff;
    height: 2px;
    /* width: 100%; */
    position: absolute;
    right: -30px;
    z-index: -1;
    transition: all 0.1s ease-out;
}
.vertical-line {
    background-color: #161212ff;
    width: 2px;
    position: absolute;
    right: -30px;
    transition: all 0.1s ease-out;
    z-index: -1;
}
</style>
<div class="card">
    <div class="card-header">
        <div class="d-flex align-items-center justify-content-between mb-3">
            <h5 class="mb-0"><i class="fas fa-sitemap me-2"></i>Bracket del Torneo</h5>
        </div>
    </div>
    <div class="card-body container-fluid">

        <div class="row row-cols-3">
            <div class="col-auto">
                <button type="button" id="swiper-button-prev" class="btn btn-sm btn-outline-secondary h-100">
                    <i class="fas fa-chevron-left"></i>
                </button>
            </div>
            <div class="d-flex flex-grow-1">
                <!-- Swiper -->
                <div class="swiper mySwiper px-1">
                    <div class="swiper-wrapper">
                        <%
                        const mixedRoundsOrdered = locals?.viewModel?.bracketData?.mixedRoundsOrdered || [];
                        %>

                        <% if (mixedRoundsOrdered.length > 0) { %>
                            <% mixedRoundsOrdered.forEach(roundMatches => { %>
                                <% if (roundMatches.length > 0) { %>
                                    <div class="swiper-slide d-flex flex-column h-100">
                                        <h5 class="text-center"><%- roundMatches[0]?.phaseLabel || 'Ronda' %></h5>
                                        <div class="bracket-round flex-grow-1 d-flex flex-column justify-content-around gap-3">
                                            
                                            
                                                <% roundMatches.forEach(match => { %>
                                                    <div class="card position-relative">
                                                        <div class="card-body">
                                                            <div class="text-muted text-center border-bottom mb-1 pb-1">
                                                                <small><i class="fas fa-clock me-1"></i> <%= match?.startTime || 'N/A' %></small>
                                                                <small class="ms-2"><i class="fas fa-map-marker-alt me-1"></i> <%= match?.courtName || 'N/A' %></small>
                                                            </div>
                                                            <div class="d-flex justify-content-around border-bottom mb-1 pb-1"><small>Team</small><small class="ms-2">Sets</small></div>
                                                            <div class="d-flex justify-content-between align-items-center mb-1">
                                                                <small class="truncate-text"><strong>A</strong> <%= match?.players?.teamA.map(p => p.name).join('/') || 'Equipo A' %></small>
                                                                <div class="d-flex mx-1">
                                                                    <span class="badge bg-light text-dark ml-1"><%= match?.score_teamA_set1 || '-' %></span>
                                                                    <span class="badge bg-light text-dark ml-1"><%= match?.score_teamA_set2 || '-' %></span>
                                                                    <span class="badge bg-light text-dark ml-1"><%= match?.score_teamA_set3 || '-' %></span>
                                                                </div>
                                                            </div>
                                                            <div class="d-flex justify-content-between align-items-center">
                                                                <small class="truncate-text"><strong>B</strong> <%= match?.players?.teamB.map(p => p.name).join('/') || 'Equipo B' %></small>
                                                                <div class="d-flex mx-1">
                                                                    <span class="badge bg-light text-dark ml-1"><%= match?.score_teamB_set1 || '-' %></span>
                                                                    <span class="badge bg-light text-dark ml-1"><%= match?.score_teamB_set2 || '-' %></span>
                                                                    <span class="badge bg-light text-dark ml-1"><%= match?.score_teamB_set3 || '-' %></span>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="card-footer text-center p-1">
                                                            <button class="btn btn-sm btn-warning" data-bs-toggle="modal" data-bs-target="#scoreModal" data-match-id="<%= match.id %>">Registrar</button>
                                                        </div>
                                                        <div class="connector"></div>
                                                        <div class="vertical-line"></div>
                                                    </div>
                                                <% }); %>
                                            
                                        </div>
                                    </div>
                                <% } %>
                            <% }); %>
                        <% } else { %>
                            <div class="swiper-slide">
                                <div class="alert alert-info">No hay datos del cuadro para mostrar.</div>
                            </div>
                        <% } %>
                    </div>
                </div>
                
            </div>
            <div class="col-auto">
                <button type="button" id="swiper-button-next" class="btn btn-sm btn-outline-secondary h-100">
                    <i class="fas fa-chevron-right"></i> 
                </button>
            </div>
            
        </div>
        
        
    </div>
</div>


<script>
document.addEventListener('DOMContentLoaded', () => {

    function getPosition( element ) {
        var rect = element.getBoundingClientRect();
        return {
            x: rect.left,
            y: rect.top
        };
    }

    function getSize( element ) {
        var rect = element.getBoundingClientRect();
        return {
            width: rect.width,
            height: rect.height
        };
    }

    function updateConnectors() {
        setTimeout(() => {
                // get element inside slides and adjust height
            const slideElements = document.querySelectorAll('.bracket-round');
            // for each slide get the content
            slideElements.forEach((slide, index) => {
                //console.log(`Slide ${index}: has this children:`, slide.children);
                // iterate children and get height and position
                let match1 = null;
                let match2 = null;
                // console.log(slide.children.length);

                for (let i = 0; i < slide.children.length; i++) {
                    const content = slide.children[i];
                    if (content) {
                        var pos = getPosition( content );
                        var size = getSize( content );

                        // Alert position in X axis
                        // console.log( `posx: ${pos.x} posy: ${pos.y}` );
                        // create connector lines

                        const connector = content.querySelector('.connector');
                        connector.style.top = `${size.height/2}px`;
                        connector.style.width = `${size.width}px`;
                        if (i % 2 === 0 ) {
                            match1 = {
                                x: pos.x,
                                y: pos.y,
                                width: size.width,
                                height: size.height
                            };
                            //pos,size;
                        } else {
                            match2 = {
                                x: pos.x,
                                y: pos.y,
                                width: size.width,
                                height: size.height
                            };
                            // draw vertical line between match1 and match2
                            const verticalLine = content.querySelector('.vertical-line');
                            verticalLine.style.height = `${match2.y - match1.y}px`;
                            verticalLine.style.bottom = `${(match1.height/2)-4}px` ;
                            // reset match1 and match2
                            match1 = null;
                            match2 = null;
                        }

                    }
                };
            });
        }, 150);
        
    }


    var swiper = new Swiper('.mySwiper', {
        slidesPerView: 3,
        spaceBetween: 60,
        navigation: {
            nextEl: '#swiper-button-next',
            prevEl: '#swiper-button-prev',
        },
        breakpoints: {
            120: {
                slidesPerView: 1,
            },
            768: {
                slidesPerView: 2,
            },
            1440: {
                slidesPerView: 3,
            },
        },
        // Optional: Enable loop mode
        loop: false,
        // modify height based on content
        autoHeight: true,
        on: {
            init: function() {
                updateConnectors();
            },
            beforeTransitionStart: function() {
                // make all connectors invisible before transition starts
                const connectors = document.querySelectorAll('.connector, .vertical-line');
                connectors.forEach(connector => {
                    connector.style.opacity = '0';
                });
            },
            transitionEnd: function() {
                setTimeout(() => {
                    // make all connectors visible after transition ends
                    const connectors = document.querySelectorAll('.connector, .vertical-line');
                    connectors.forEach(connector => {
                        connector.style.opacity = '1';
                    });
                }, 300);
                
            },
            slideNextTransitionEnd: function() {
                // update height of next slides
                for(let i = this.activeIndex ; i < this.slides.length; i++) {
                    // remove h-100 class
                    this.slides[i].classList.remove('h-100');
                }
                this.updateAutoHeight();
                // delay 100ms to allow height transition
                setTimeout(() => {
                    for(let i = this.activeIndex ; i < this.slides.length; i++) {
                        this.slides[i].classList.add('h-100');
                    }
                    updateConnectors();
                }, 50);
                
            },
            slidePrevTransitionEnd: function() {            
                // restore height of all slides
                for(let i = 0; i < this.slides.length; i++) {
                    this.slides[i].classList.remove('h-100');
                }
                this.updateAutoHeight();
                // delay 100ms to allow height transition
                setTimeout(() => {
                    for(let i = 0; i < this.slides.length; i++) {
                        this.slides[i].classList.add('h-100');
                    }
                    updateConnectors();
                }, 50);
            },
            resize: function() {
                // restore height of all slides
                for(let i = 0; i < this.slides.length; i++) {
                    this.slides[i].classList.remove('h-100');
                }
                this.updateAutoHeight();
                // delay 100ms to allow height transition
                setTimeout(() => {
                    for(let i = 0; i < this.slides.length; i++) {
                        this.slides[i].classList.add('h-100');
                    }
                    updateConnectors();
                }, 50);
            },
        },
        
    });
});
</script>